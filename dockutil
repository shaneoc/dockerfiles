#!/usr/bin/python3
# vim: et ts=4 sw=4

import sys
import os
import argparse
import subprocess
import json
import re
from collections import OrderedDict

bridge_name = 'br0'

class ContainerConfig:
    def __init__(self, containers_file):
        config = self.parse_json(containers_file)
        self.containers_file = containers_file
        self.hostnames = self.parse_hostnames(config['hostnames'])
        self.bridges = self.parse_bridges(config['bridges'], self.hostnames)
        self.forwards = self.parse_forwards(config['forwards'], self.hostnames)
        self.containers = self.parse_containers(config['containers'],
                self.bridges, self.forwards)

    @staticmethod
    def parse_json(filename):
        with open(filename) as f:
            file_data = f.read()
        return json.loads(re.sub(r'(//.*?\n|/\*.*?\*/)', '', file_data,
            flags=re.DOTALL))

    @staticmethod
    def lookup_ip_str(ip_str, hostnames):
        return hostnames[ip_str] if ip_str in hostnames else ip_str.split('/',1)

    @classmethod
    def parse_hostnames(cls, json_obj):
        hostnames = OrderedDict()
        for name, ip_str in json_obj:
            hostnames[name] = cls.lookup_ip_str(ip_str, hostnames)
        return hostnames

    @classmethod
    def parse_bridges(cls, json_obj, hostnames):
        class BridgeConnection:
            def __init__(self, bridge_name, entry):
                self.bridge_name = bridge_name
                self.container, ip_str, self.net_iface = entry
                self.ip, self.netmask = cls.lookup_ip_str(ip_str, hostnames)
        bridges = dict()
        for bridge_name, bridge_list in json_obj.items():
            for entry in bridge_list:
                conn = BridgeConnection(bridge_name, entry)
                bridges[conn.container] = bridges.get(conn.container, []) + [conn]
        return bridges

    @classmethod
    def parse_forwards(cls, json_obj, hostnames):
        class Forward:
            def __init__(self, entry):
                source, self.container, self.container_port = entry
                ip_str, self.port = source.split(':',1)
                self.ip, self.netmask = cls.lookup_ip_str(ip_str, hostnames)
        return [Forward(entry) for entry in json_obj]

    @staticmethod
    def parse_containers(json_obj, bridges, forwards):
        class Container:
            def __init__(self, entry):
                self.name = entry['name']
                self.hostname = entry.get('hostname', None)
                self.image = entry['image']
                self.args = entry.get('args', '')
                self.volumes = entry.get('volumes', [])
                self.forwards = [f for f in forwards if f.container == self.name]
                self.bridges = bridges.get(self.name, [])

        return {entry['name']: Container(entry) for entry in json_obj}

class Main:
    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('action')
        parser.add_argument('name', nargs='?', default='all')
        parser.add_argument('-i', action='store_true')
        args = parser.parse_args()

        self.base_dir = os.path.dirname(os.path.realpath(__file__))
        images_dir = os.path.join(self.base_dir, 'images')
        containers_file = os.path.join(self.base_dir, 'containers',
                'containers.json')

        self.cfg = ContainerConfig(containers_file)
        self.images = self.find_images(images_dir)
        self.containers = self.gen_containers(self.cfg)

        if args.action == 'images':
            for name, img in sorted(self.images.items()):
                img.print_info()

        if args.action == 'build':
            self.build(args.name)

        if args.action == 'containers':
            for name, container in sorted(self.containers.items()):
                container.print_info()

        if args.action == 'run':
            self.run(args.name, args.i)

        if args.action == 'add-ips':
            self.add_ips()

    @staticmethod
    def find_images(images_dir):
        images = dict()
        for path, _, filenames in os.walk(images_dir):
            if 'Dockerfile' in filenames:
                img = Image(path, images_dir)
                images[img.name] = img
        return images

    @staticmethod
    def gen_containers(cfg):
        return {name: Container(container_cfg) for name, container_cfg in
                cfg.containers.items()}

    def build(self, requested_image):
        if requested_image == 'all':
            for image in self.images.values():
                image.build()
        else:
            if requested_image in self.images:
                self.images[requested_image].build()
            else:
                sys.exit('Error: unknown image: {}'.format(requested_image))

    def run(self, requested_container, interactive):
        if requested_container == 'all':
            for container in self.containers.values():
                container.run(self, interactive)
        else:
            if requested_container in self.containers:
                self.containers[requested_container].run(self, interactive)
            else:
                sys.exit('Error: unknown container: {}'.
                        format(requested_container))

    def add_ips(self):
        routes = subprocess.check_output(['ip', 'route', 'list'],
                universal_newlines=True).split('\n')

        default_gw = None
        for route in routes:
            parts = route.split()
            if len(parts) >= 5 and parts[0] == 'default':
                assert default_gw == None
                default_gw = parts[4]
        assert default_gw != None

        iface_index = 0
        finished_ips = set()
        for forward in self.cfg.forwards:
                if forward.ip not in finished_ips:
                    finished_ips.add(forward.ip)
                    call('sudo ifconfig {}:{} {}/{} up'.format(default_gw,
                        iface_index, forward.ip, forward.netmask))
                    iface_index += 1

class Image:
    def __init__(self, path, images_dir):
        self.path = path
        self.name = os.path.relpath(path, images_dir).replace('/','.')

    def build(self):
        call('sudo docker.io build -t {} {}'.format(self.name, self.path))

    def print_info(self):
        print(self.name)

class Container:
    def __init__(self, cfg):
        self.cfg = cfg

    def run(self, main, interactive):
        print('Stopping any existing container: ' + self.cfg.name)
        call('sudo docker.io stop {} 2>/dev/null || true'.format(self.cfg.name))
        call('sudo docker.io rm {} 2>/dev/null || true'.format(self.cfg.name))
        print('Running new container: ' + self.cfg.name)

        misc_args = '-i -t' if interactive else '-d'
        hostname = '-h ' + self.cfg.hostname if self.cfg.hostname else ''
        ports = ' '.join('-p {}:{}:{}'.format(f.ip, f.port, f.container_port)
                for f in self.cfg.forwards)
        volumes = ' '.join('-v '+ v for v in self.cfg.volumes)
        call('sudo docker.io run {} --name {} {} {} {} {} {}' .format(
            misc_args, self.cfg.name, hostname, ports, volumes, self.cfg.image,
            self.cfg.args))

        for conn in self.cfg.bridges:
            call("sudo sh -c 'PATH={}:$PATH {}/pipework/pipework {} {} {}/{}'".format(
                main.base_dir, main.base_dir, conn.bridge_name, self.cfg.name,
                conn.ip, conn.netmask))

    def print_info(self):
        print(self.cfg.name)

def call(cmd):
    # print('$ ' + cmd)
    subprocess.check_call(cmd, shell=True)

if __name__ == '__main__':
    Main()
