#!/usr/bin/python3
# vim: et ts=4 sw=4

import sys
import os
import argparse
import subprocess
import json
import re
from collections import OrderedDict

class Main:
    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('action')
        parser.add_argument('name', nargs='?', default='all')
        args = parser.parse_args()

        self.base_dir = os.path.dirname(os.path.realpath(__file__))
        self.images_dir = os.path.join(self.base_dir, 'images')
        self.containers_file = os.path.join(self.base_dir, 'containers',
                'containers.json')
        self.hosts_file = os.path.join(self.base_dir, 'containers', 'hosts')

        self.find_hostnames()
        self.find_images()
        self.find_containers()

        if args.action == 'images':
            for name, img in sorted(self.images.items()):
                img.print_info()

        if args.action == 'build':
            self.build(args.name)

        if args.action == 'containers':
            for name, container in sorted(self.containers.items()):
                container.print_info()

        if args.action == 'run':
            self.run(args.name)

        if args.action == 'add-ips':
            self.add_ips()

    def find_hostnames(self):
        self.hostnames = OrderedDict()
        with open(self.hosts_file) as f:
            for line in f:
                ip, hostname = line.strip().split()
                self.hostnames[hostname] = ip

    def find_images(self):
        self.images = dict()
        for path, _, filenames in os.walk(self.images_dir):
            if 'Dockerfile' in filenames:
                img = Image(self, path)
                self.images[img.name] = img

    def find_containers(self):
        with open(self.containers_file) as f:
            file_data = f.read()
        json_list = json.loads(re.sub(r'(//.*?\n|/\*.*?\*/)', '', file_data,
                flags=re.DOTALL))

        self.containers = dict()
        for json_obj in json_list:
            container = Container(json_obj)
            self.containers[container.name] = container

    def build(self, requested_image):
        if requested_image == 'all':
            for image in self.images.values():
                image.build()
        else:
            if requested_image in self.images:
                self.images[requested_image].build()
            else:
                sys.exit('Error: unknown image: {}'.format(requested_image))

    def run(self, requested_container):
        if requested_container == 'all':
            for container in self.containers.values():
                container.run(self)
        else:
            if requested_container in self.containers:
                self.containers[requested_container].run(self)
            else:
                sys.exit('Error: unknown container: {}'.
                        format(requested_container))

    def add_ips(self):
        routes = subprocess.check_output(['ip', 'route', 'list'],
                universal_newlines=True).split('\n')

        default_gw = None
        for route in routes:
            parts = route.split()
            if len(parts) >= 5 and parts[0] == 'default':
                assert default_gw == None
                default_gw = parts[4]
        assert default_gw != None

        for i, (hostname, ip) in enumerate(self.hostnames.items()):
                call('sudo ifconfig {}:{} {} up'.format(default_gw, i, ip))

class Image:
    def __init__(self, main, path):
        self.path = path
        self.name = os.path.relpath(path, main.images_dir).replace('/','.')

    def build(self):
        call('sudo docker.io build -t {} {}'.format(self.name, self.path))

    def print_info(self):
        print(self.name)

class Container:
    def __init__(self, json_obj):
        self.name = json_obj['name']
        self.image = json_obj['image']
        self.args = json_obj.get('args', '')
        self.ports = json_obj.get('ports', [])
        self.volumes = json_obj.get('volumes', [])

    def run(self, main):
        print('Stopping any existing container: ' + self.name)
        call('sudo docker.io stop {} 2>/dev/null || true'.format(self.name))
        call('sudo docker.io rm {} 2>/dev/null || true'.format(self.name))
        print('Running new container: ' + self.name)

        ports = ' '.join('-p {}:{}:{}'.format(main.hostnames[p[0].split(':')[0]],
            p[0].split(':')[1], p[1]) for p in self.ports)
        volumes = ' '.join('-v '+ v for v in self.volumes)
        call('sudo docker.io run -d --name {name} {ports} {volumes} {image} {args}'
                .format(name=self.name, ports=ports, volumes=volumes,
                    image=self.image, args=self.args))

    def print_info(self):
        print(self.name)

def call(cmd):
    # print('$ ' + cmd)
    subprocess.check_call(cmd, shell=True)

if __name__ == '__main__':
    Main()
